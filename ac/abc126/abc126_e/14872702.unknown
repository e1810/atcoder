use proconio::{input, fastout};
use std::collections::VecDeque;

#[fastout]
fn main() {
    input!{
        (n, m): (usize, usize),
        xyz: [(usize, usize, usize); m]
    };

    let mut links: Vec<Vec<usize>> = vec![Vec::new(); n];
    for (a, b, c) in xyz {
        links[a-1].push(b-1);
        links[b-1].push(a-1);
    }

    let mut ans = 0;
    let mut used = vec![false; n];
    for i in 0..n {
        if !used[i] {
            ans += 1;
            let mut que: VecDeque<usize> = VecDeque::new();
            que.push_back(i);
            while !que.is_empty() {
                let from = match que.back() {
                    Some(x) => *x,
                    None => 0 as usize,
                };
                que.pop_back();
                if used[from] {
                    continue;
                }
                used[from] = true;
                for to in links[from].iter() {
                    if !used[*to] {
                        que.push_back(*to);
                    }
                }
            }
        }
    }
    println!("{}", ans);
}
