use proconio::{input, fastout};

#[fastout]
fn answer(links: std::vec::Vec<std::vec::Vec<bool>>, n: usize) -> std::vec::Vec<(usize,usize)> {
    let mut ret: std::vec::Vec<(usize,usize)> = Vec::new();
    for i in 0..n {
        for j in (i+1)..n {
            if links[i][j] {
                ret.push((i, j));
            }
        }
    }
    ret
}


fn main() {
    input!{
        (n, k): (usize, usize)
    };

    let mut cnt = (n-1) * (n-2) / 2;
    if k>cnt {
        println!("-1");
        return;
    }

    let mut links = vec![vec![false; n]; n];
    for j in 0..(n-1) {
        links[n-1][j] = true;
        links[j][n-1] = true;
    }

    'all: for i in 0..(n-1) {
        for j in (i+1)..(n-1) {
            if cnt==k {
                break 'all;
            } else {
                links[i][j] = true;
                links[j][i] = true;
                cnt -= 1;
            }   
        }
    }

    let edges = answer(links, n);
    println!("{}", edges.len());
    for (x, y) in edges {
        println!("{} {}", x+1, y+1);
    }
}
